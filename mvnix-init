#!/bin/bash
set -e

usage() {
  # shellcheck disable=SC2015
  test "$1" && echo -e Error: "$1"\\n || true
  cat >&2 <<EOF
  Usage: mvnix-init [OPTIONS] [<NIX-FILE>]

  Options:
    -S, --src                A Nix expression to use as 'src' for derivation
    -o, --output <dir>       Output directory for generated files
    -s, --standalone         Include 'mavenix.nix' file
    -f, --force              Overwrite output file if exists
    -v, --verbose            Verbose output
    -h, --help               Print usage

  Version: $MAVENIX_VERSION
EOF
  exit 1
}

tmpl() { sed "s|%%$1%%|$2|g"; }

# Default values
outputDir="."

# Parse CLI arguments
while test "$1";do
  case "$1" in
    -S|--src) shift;srcExpr="($1)";;
    -o|--output) shift;outputDir="$1";;
    -s|--standalone) standalone=1;;
    -f|--force) forceOverwrite=1;;
    -v|--verbose) set -x;;
    -h|--help) usage;;
    -*) usage "no option \"$1\"";;
    *) config="$1";;
  esac
  shift
done

mkdir -p "$outputDir"
config="${config-$outputDir/default.nix}"
[[ -n "$forceOverwrite" || ! -e "$config" ]] || usage "\"$config\" already exists"

srcExpr="${srcExpr-./$(realpath --relative-to="$(dirname "$config")" ".")}"

copy() { cp "$1" "$2"; echo "$2"; }
echo >&2 "
  Creating files:
"

if test "$standalone"; then
  relEnv="./$(realpath --relative-to="$(dirname "$config")" "$outputDir/mavenix.nix")"
  copy "$MAVENIX_SCRIPT" "$outputDir/mavenix.nix"
  chmod u+w "$outputDir/mavenix.nix"
else
  relEnv="fetchTarball { url = \"$MAVENIX_DOWNLOAD\"; sha256 = \"$(nix-prefetch-url "$MAVENIX_DOWNLOAD" --unpack 2>&-)\"; }"
fi

# shellcheck disable=SC2002
copy <(cat "$CONFIG_TEMPLATE" \
| tmpl src "$srcExpr" \
| tmpl env "$relEnv" \
) "$config"

echo >&2 "
  1. Configure by editing '$config'
  2. Create a lock file by running 'mvnix-update \"$config\"'
  3. Build your project 'nix-build \"$config\"'
"
